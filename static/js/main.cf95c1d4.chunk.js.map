{"version":3,"sources":["redux/index.js","reader.js","writer.js","display.js","topbar.js","App.js","serviceWorker.js","index.js"],"names":["initialState","title","text","notification","articlesInDatabase","searchInput","displayMode","loggedIn","status","user","password","currentLogRegAction","getDataError","payload","type","loginError","handleChangeEffect","value","name","dispatch","middleware","applyMiddleware","thunk","store","createStore","state","action","Reader","className","id","aria-label","aria-describedby","placeholder","onChange","e","props","handleChange","onClick","searchData","this","getData","Component","connect","axios","get","then","res","data","catch","err","target","searchText","window","location","length","searchEffect","Writer","disabled","postArticle","content","article","postedData","fetch","method","body","JSON","stringify","headers","error","console","Display","map","key","TopBar","callRegisterOrLogin","register","login","changeLogRegAction","currentAction","changeLogRegActionEffect","userData","registerEffect","json","myJSON","loginEffect","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf95c1d4.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\r\nimport axios from 'axios';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst GET_DATA = 'GET_DATA';\r\nconst GET_DATA_ERROR = 'GET_DATA_ERROR';\r\nconst HANDLE_CHANGE_FROM_SEARCH = 'HANDLE_CHANGE_FROM_SEARCH';\r\nconst SEARCH = 'SEARCH';\r\nconst SEARCH_EMPTY = 'SEARCH_EMPTY';\r\nconst POST_ARTICLE = 'POST_ARTICLE';\r\nconst POST_ARTICLE_ERROR = 'POST_ARTICLE_ERROR';\r\nconst HANDLE_CHANGE_FROM_WRITER_TITLE = 'HANDLE_CHANGE_FROM_WRITER_TITLE';\r\nconst HANDLE_CHANGE_FROM_WRITER_TEXT = 'HANDLE_CHANGE_FROM_WRITER_TEXT';\r\nconst HANDLE_CHANGE_FROM_WRITER_USER = 'HANDLE_CHANGE_FROM_WRITER_USER';\r\nconst HANDLE_CHANGE_FROM_WRITER_PASSWORD = 'HANDLE_CHANGE_FROM_WRITER_PASSWORD';\r\nconst CHANGE_LOG_REG_ACTION = 'CHANGE_LOG_REG_ACTION';\r\nconst REGISTER = 'REGISTER';\r\nconst REGISTER_ERROR = 'REGISTER_ERROR';\r\nconst LOGIN = 'LOGIN';\r\nconst LOGIN_ERROR = 'LOGIN_ERROR';\r\n\r\nconst initialState = {\r\n    title: '',\r\n    text: '',\r\n    notification: 'Started',\r\n    articlesInDatabase: [],\r\n    searchInput: '',\r\n    displayMode: '',\r\n    loggedIn: false,\r\n    status: 'Not logged in',\r\n    user: '',\r\n    password: '',\r\n    currentLogRegAction: 'Register'\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case  GET_DATA :\r\n            return { ...state, articlesInDatabase: action.payload, notification: 'Data fetched!', status: 'Data fetched', displayMode: 'Search' };\r\n        case GET_DATA_ERROR :\r\n            return { ...state, notification: action.payload};\r\n        case HANDLE_CHANGE_FROM_SEARCH :\r\n            return { ...state, notification: 'Searching', searchInput: action.payload.value, displayMode: 'Search'};\r\n        case HANDLE_CHANGE_FROM_WRITER_TITLE :\r\n            return { ...state, notification: 'Writing', title: action.payload.value, displayMode: 'Writer'};\r\n        case HANDLE_CHANGE_FROM_WRITER_TEXT :\r\n            return { ...state, notification: 'Writing', text: action.payload.value, displayMode: 'Writer'};\r\n        case HANDLE_CHANGE_FROM_WRITER_USER :\r\n            return { ...state, user: action.payload.value };\r\n        case HANDLE_CHANGE_FROM_WRITER_PASSWORD :\r\n            return { ...state, password: action.payload.value };\r\n        case SEARCH :\r\n            return {...state, articlesInDatabase: action.payload};\r\n        case SEARCH_EMPTY :\r\n            return {...state, notification: 'There isn\\'t such article in our database'};\r\n        case POST_ARTICLE :\r\n            return {...state, notification: 'Article posted', articlesInDatabase: action.payload};\r\n        case POST_ARTICLE_ERROR :\r\n            return {...state, notification: 'Please fill all matandory fileds' };\r\n        case CHANGE_LOG_REG_ACTION :\r\n            if (action.payload === 'Login') {\r\n                return {...state, notification: 'action changed', currentLogRegAction: 'Login'};\r\n            }\r\n            else {\r\n                return {...state, notification: 'action changed', currentLogRegAction: 'Register'};\r\n            }\r\n        case REGISTER :\r\n            return {...state, notification: 'New user has been registered'};\r\n        case REGISTER_ERROR :\r\n            return {...state, notification: 'User name is already taken'};\r\n        case LOGIN :\r\n            if (state.loggedIn) {\r\n                return {...state, notification: 'You have been logged out', loggedIn: false};\r\n            }\r\n            else {\r\n                return {...state, notification: 'Logged in as: ' + action.payload.user, loggedIn: true};\r\n            }\r\n\r\n        case LOGIN_ERROR :\r\n            return {...state, notification: 'Wrong user name of password'};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const getData = (payload) => {\r\n    return {\r\n        type: GET_DATA, payload\r\n    }\r\n};\r\n\r\nexport const getDataError = (payload) => {\r\n    return {\r\n        type: GET_DATA_ERROR, payload\r\n    }\r\n};\r\n\r\nexport const handleChangeFromSearch = (payload) => {\r\n    return {\r\n        type: HANDLE_CHANGE_FROM_SEARCH, payload\r\n    }\r\n};\r\n\r\nexport const handleChangeFromWriterTitle = (payload) => {\r\n    return {\r\n        type: HANDLE_CHANGE_FROM_WRITER_TITLE, payload\r\n    }\r\n};\r\n\r\nexport const handleChangeFromWriterText = (payload) => {\r\n    return {\r\n        type: HANDLE_CHANGE_FROM_WRITER_TEXT, payload\r\n    }\r\n};\r\n\r\nexport const handleChangeFromWriterUser = (payload) => {\r\n    return {\r\n        type: HANDLE_CHANGE_FROM_WRITER_USER, payload\r\n    }\r\n};\r\n\r\nexport const handleChangeFromWriterPassword = (payload) => {\r\n    return {\r\n        type: HANDLE_CHANGE_FROM_WRITER_PASSWORD, payload\r\n    }\r\n};\r\n\r\nexport const search = (payload) => {\r\n    return {\r\n        type: SEARCH, payload\r\n    }\r\n};\r\n\r\nexport const searchEmpty = () => {\r\n    return {\r\n        type: SEARCH_EMPTY\r\n    }\r\n};\r\n\r\nexport const postArticle = (payload) => {\r\n    return {\r\n        type: POST_ARTICLE, payload\r\n    }\r\n};\r\n\r\nexport const postArticleError = () => {\r\n    return {\r\n        type: POST_ARTICLE_ERROR\r\n    }\r\n};\r\n\r\nexport const changeLogRegAction = (payload) => {\r\n    return {\r\n        type: CHANGE_LOG_REG_ACTION, payload\r\n    }\r\n};\r\n\r\nexport const register = (payload) => {\r\n    return {\r\n        type: REGISTER, payload\r\n    }\r\n};\r\n\r\nexport const registerError = (payload) => {\r\n    return {\r\n        type: REGISTER_ERROR, payload\r\n    }\r\n};\r\n\r\nexport const login = (payload) => {\r\n    return {\r\n        type: LOGIN, payload\r\n    }\r\n};\r\nexport const loginError = (payload) => {\r\n    return {\r\n        type: LOGIN_ERROR, payload\r\n    }\r\n};\r\n\r\n/* Side effects actions */\r\nexport const getDataEffect = () => {\r\n    return (dispatch) => {\r\n        axios.get('http://localhost:8080/articles')\r\n                .then((res) => {\r\n                    dispatch(getData(res.data));\r\n                })\r\n                .catch((err) => {\r\n                    dispatch(getDataError(err));\r\n                })\r\n    }\r\n};\r\n\r\nexport const handleChangeEffect = (value) => {\r\n\r\n    if (value.name === 'searchInput') {\r\n        return (dispatch) => { dispatch(handleChangeFromSearch(value)) }\r\n    }\r\n\r\n    else if (value.name === 'title') {\r\n        return (dispatch) => { dispatch(handleChangeFromWriterTitle(value)) }\r\n    }\r\n\r\n    else if (value.name === 'text') {\r\n        return (dispatch) => { dispatch(handleChangeFromWriterText(value)) }\r\n    }\r\n\r\n    else if (value.name === 'user') {\r\n        return (dispatch) => { dispatch(handleChangeFromWriterUser(value)) }\r\n    }\r\n\r\n    else if (value.name === 'password') {\r\n        return (dispatch) => { dispatch(handleChangeFromWriterPassword(value)) }\r\n    }\r\n\r\n    else {\r\n\r\n    }\r\n\r\n};\r\n\r\nexport const searchEffect = (searchText) => {\r\n    return (dispatch) => {\r\n\r\n        axios.get('http://localhost:8080/search'+'?q=' + searchText)\r\n            .then((res) => {\r\n                window.location = '#search' +'?q=' + searchText;\r\n                if (res.data.length <= 0) {\r\n                    dispatch(dispatch(searchEmpty()));\r\n                }\r\n                else {\r\n                    dispatch(dispatch(search(res.data)));\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                dispatch(getDataError(err));\r\n            })\r\n    }\r\n};\r\n\r\nexport const postArticleEffect = (postedData) => {\r\n    return (dispatch) => {\r\n\r\n        if (postedData.title == '' || postedData.content == '') {\r\n            dispatch(dispatch(postArticleError()))\r\n        }\r\n\r\n        else {\r\n            fetch('http://localhost:8080/articles', {\r\n                method: 'POST',\r\n                body: JSON.stringify(postedData),\r\n                headers:{\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    if (res.status == 200) {\r\n                        dispatch(dispatch(postArticle(res.data)))\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n    }\r\n};\r\n\r\nexport const registerEffect = (userData) => {\r\n    return (dispatch) => {\r\n\r\n        if (userData.user == '' || userData.password == '') {\r\n            dispatch(dispatch(postArticleError()))\r\n        }\r\n        else {\r\n            fetch('http://localhost:8080/register', {\r\n                method: 'POST',\r\n                body: JSON.stringify(userData),\r\n                headers:{\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    if (res.status == 201) {\r\n                        dispatch(dispatch(registerError()))\r\n                    }\r\n                    else if (res.status == 200) {\r\n                        dispatch(dispatch(register(res.data)))\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n    }\r\n};\r\n\r\nexport const loginEffect = (userData) => {\r\n    return (dispatch) => {\r\n\r\n            fetch('http://localhost:8080/login', {\r\n                method: 'POST',\r\n                body: JSON.stringify(userData),\r\n                headers:{\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    return res.json();\r\n                })\r\n                .then((myJSON) => {\r\n                    if (myJSON.length <= 0) {\r\n                        dispatch(dispatch(loginError))\r\n                    }\r\n                    else {\r\n                        dispatch(login(userData))\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n};\r\n\r\nexport const changeLogRegActionEffect = (currentAction) => {\r\n    return (dispatch) => {\r\n            dispatch(dispatch(changeLogRegAction(currentAction)))\r\n    }\r\n};\r\n\r\nconst middleware = applyMiddleware(thunk);\r\nconst store = createStore(reducer, middleware);\r\n\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"./App.css\";\r\nimport {getDataEffect, handleChangeEffect, searchEffect} from './redux';\r\n\r\nclass Reader extends  Component {\r\n\r\n    render() {\r\n        const callSearch = () => {\r\n            const searchInput = this.props.searchInput;\r\n            this.props.searchData(searchInput);\r\n\r\n        };\r\n\r\n        return(\r\n            <div className=\"col-md-12 col-lg-6\">\r\n                <div className=\"jumbotron\">\r\n                    <h1>Read</h1>\r\n                    <h2>Get all articles from database or search for them</h2>\r\n                    <input type=\"text\" className=\"form-control\" id=\"search\" aria-label=\"Small\" name=\"searchInput\"\r\n                           aria-describedby=\"inputGroup-sizing-sm\" placeholder=\"Search by article title\"  onChange={(e)=> this.props.handleChange(e)} />\r\n                    <button className=\"btn btn-primary btn-lg\" id=\"searchArticles\" onClick={callSearch}>Search articles</button>\r\n                    <button className=\"btn btn-primary btn-lg\" id=\"getArticles\" onClick={this.props.getData}>Get all articles</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        title: state.title,\r\n        text: state.text,\r\n        searchInput: state.searchInput\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getData: ()=> dispatch(getDataEffect()),\r\n        handleChange: (e) => {\r\n\r\n            let value = {value: e.target.value, name: e.target.name};\r\n            dispatch(handleChangeEffect(value));\r\n\r\n        },\r\n        searchData: (searchText) => {\r\n            dispatch(searchEffect(searchText));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Reader);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport {handleChangeEffect, postArticleEffect} from \"./redux\";\r\n\r\nclass Writer extends Component {\r\n\r\n    render() {\r\n        const callPosting =()=> {\r\n            const title = this.props.title;\r\n            const text = this.props.text;\r\n            this.props.postArticle({title: title, content: text})\r\n        };\r\n\r\n        return (\r\n            <div className=\"col-md-12 col-lg-6\">\r\n                <div className=\"jumbotron\">\r\n                    <h1>Write</h1>\r\n                    <h2>Write You own article</h2>\r\n                    <form>\r\n                        <input type=\"text\" className=\"form-control\" id=\"title\" aria-label=\"Small\" name=\"title\"\r\n                               aria-describedby=\"inputGroup-sizing-sm\" placeholder=\"Title*\" onChange={e => this.props.handleChange(e)} />\r\n                        <textarea className=\"form-control\" id=\"content\" name=\"text\"\r\n                                  placeholder=\"Content goes here...*\" onChange={e => this.props.handleChange(e)} />\r\n                    </form>\r\n                    <button className={(this.props.loggedIn ? \"post\" : \"block\") + \" btn btn-primary btn-lg\"} disabled={!this.props.loggedIn} id=\"postArticles\" onClick={callPosting}>Post article</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        title: state.title,\r\n        text: state.text,\r\n        loggedIn: state.loggedIn\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleChange: (e) => {\r\n\r\n            let value = {value: e.target.value, name: e.target.name};\r\n            dispatch(handleChangeEffect(value));\r\n\r\n            // if ((this.props.title != '' || this.props.text != '') && (e.target.name === 'title' || e.target.name === 'text')) {\r\n            //     currentState = 'writer'\r\n            // }\r\n\r\n        },\r\n        postArticle: (article) => {\r\n            dispatch(postArticleEffect(article));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Writer);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\n\r\nclass Display extends Component {\r\n    render() {\r\n\r\n        /* Is that part ok???? */\r\n        let content;\r\n         \r\n        if (this.props.displayMode === 'Writer') {\r\n            content = <div> <h1>{this.props.title}</h1> <h5>{this.props.text}</h5></div>\r\n        }\r\n\r\n        else {\r\n            content = <div className=\"articles row\">\r\n                {this.props.articlesInDatabase.map(article => {\r\n                    return (\r\n                        <div className=\"article col-md-3\" key={article.id}>\r\n                            <h3>{article.title}</h3>\r\n                            <p>{article.content}</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        }\r\n        /* Until this */\r\n        return (\r\n            <div className=\" col-md-12\" id=\"screen\">\r\n                <p className=\"notification\">{this.props.notification}</p>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        articlesInDatabase: state.articlesInDatabase,\r\n        notification: state.notification,\r\n        status: state.status,\r\n        title: state.title,\r\n        text: state.text,\r\n        content: state.content,\r\n        displayMode: state.displayMode\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Display);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport {handleChangeEffect, changeLogRegActionEffect, registerEffect, loginEffect} from \"./redux\";\r\n\r\nclass TopBar extends Component {\r\n\r\n    render() {\r\n\r\n        let action;\r\n        let content;\r\n\r\n        const changeAction =()=> {\r\n            if (this.props.currentLogRegAction === 'Register') {\r\n                action = 'Login';\r\n            }\r\n            else {\r\n                action = 'Register';\r\n            }\r\n            this.props.changeLogRegAction(action)\r\n        };\r\n\r\n        const callRegisterOrLogin =()=> {\r\n            const user = this.props.user;\r\n            const password = this.props.password;\r\n\r\n            if (this.props.currentLogRegAction === 'Register') {\r\n                this.props.register({user: user, password: password})\r\n            }\r\n            else {\r\n                this.props.login({user: user, password: password})\r\n            }\r\n\r\n        };\r\n\r\n        if (this.props.loggedIn) {\r\n            content = <div className=\"align-right\"> <button className=\"btn btn-primary md\" id=\"login\" onClick={callRegisterOrLogin}>Logout</button> </div>\r\n        }\r\n\r\n        else {\r\n            content = <div> <p onClick={changeAction}><span className={this.props.currentLogRegAction === 'Register' ? 'active' : ''}>Register</span> <span className={this.props.currentLogRegAction === 'Login' ? 'active' : ''}>Login</span></p>\r\n                <input type=\"text\" className=\"form-control\" id=\"user\" aria-label=\"Small\" name=\"user\"\r\n            aria-describedby=\"inputGroup-sizing-sm\" placeholder=\"Username...\" onChange={e => this.props.handleChange(e)} />\r\n            <input type=\"text\" className=\"form-control\" id=\"password\" aria-label=\"Small\" name=\"password\" type=\"password\"\r\n                   aria-describedby=\"inputGroup-sizing-sm\" placeholder=\"Password...\" onChange={e => this.props.handleChange(e)} />\r\n            <button className=\"btn btn-primary md\" id=\"login\" onClick={callRegisterOrLogin}>{this.props.currentLogRegAction}</button>\r\n            </div>\r\n        }\r\n\r\n        return (\r\n            <div className=\"topbar\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-4\">\r\n                            <p><span className=\"info\">{this.props.currentLogRegAction}</span></p>\r\n                        </div>\r\n                        <div className=\"col-sm-12 col-md-8 fields\">\r\n                            {content}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      loggedIn: state.loggedIn,\r\n      status: state.status,\r\n      user: state.user,\r\n      password: state.password,\r\n      currentLogRegAction: state.currentLogRegAction\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleChange: (e) => {\r\n\r\n            let value = {value: e.target.value, name: e.target.name};\r\n            dispatch(handleChangeEffect(value));\r\n\r\n        },\r\n        changeLogRegAction: (currentAction) => {\r\n            dispatch(changeLogRegActionEffect(currentAction));\r\n        },\r\n        register: (userData) => {\r\n            dispatch(registerEffect(userData));\r\n        },\r\n        login: (userData) => {\r\n            dispatch(loginEffect(userData))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);","import React, { Component } from \"react\";\r\nimport Reader from './reader';\r\nimport Writer from \"./writer\";\r\nimport Display from './display';\r\nimport TopBar from './topbar';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/index.js';\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render() {\r\n\r\n      return (\r\n          <Provider store={store}>\r\n              <div className=\"App\">\r\n                  <TopBar />\r\n                  <div className=\"container\">\r\n                      <div className=\"row\">\r\n                          <Reader />\r\n                          <Writer />\r\n                      </div>\r\n                    <div className=\"row\">\r\n                        <Display   />\r\n                    </div>\r\n                  </div>\r\n              </div>\r\n          </Provider>\r\n      );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}